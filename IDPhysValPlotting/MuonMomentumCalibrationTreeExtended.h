#ifndef NTAU__MUONMOMENTUMCALIBRATIONTREE__EXTENDED__H
#define NTAU__MUONMOMENTUMCALIBRATIONTREE__EXTENDED__H

/// Autogenerated code by MuonMomentumCalibrationTree on Mon Oct 11 13:41:35 2021


#include "IDPhysValPlotting/MuonMomentumCalibrationTree.h"

class MuonMomentumCalibrationTreeExtended: public MuonMomentumCalibrationTree{
    public:
        MuonMomentumCalibrationTreeExtended(TTree* t): MuonMomentumCalibrationTree(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> weight{[](MuonMomentumCalibrationTree &t){
         return t.EventWeight() * t.PileupWeight() / 1942.; 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Pos_CB_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Pos_CB_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Pos_ME_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Pos_ME_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Pos_MS_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Pos_MS_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Pos_ID_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Pos_ID_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Neg_CB_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Neg_CB_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Neg_ME_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Neg_ME_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Neg_MS_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Neg_MS_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Neg_ID_TrackCov_qoverp{[](MuonMomentumCalibrationTree &t){
         return std::sqrt(t.Neg_ID_TrackCovMatrix(14)); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Pos_Truth_SinTheta{[](MuonMomentumCalibrationTree &t){
        return std::sin(2. * std::atan(std::exp(-t.Pos_TruthEta()))); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Neg_Truth_SinTheta{[](MuonMomentumCalibrationTree &t){
        return std::sin(2. * std::atan(std::exp(-t.Neg_TruthEta()))); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Pos_Truth_qoverp{[](MuonMomentumCalibrationTree &t){
        return t.Pos_TruthCharge() / t.Pos_TruthPt() * std::sin(2. * std::atan(std::exp(-t.Pos_TruthEta()))); 
     }, this}; 
     DerivedVirtualBranch<float,MuonMomentumCalibrationTree> Neg_Truth_qoverp{[](MuonMomentumCalibrationTree &t){
        return t.Neg_TruthCharge() / t.Neg_TruthPt() * std::sin(2. * std::atan(std::exp(-t.Neg_TruthEta()))); 
     }, this}; 
};
#endif // NTAU__MUONMOMENTUMCALIBRATIONTREE__H
