#ifndef NTAU__TRUTHRECONTUPLE__H
#define NTAU__TRUTHRECONTUPLE__H

/// Autogenerated code by NtupleBranchMgr on Mon Oct  4 16:54:41 2021


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class TruthRecoNtuple: public NtupleBranchMgr{
    public:
        TruthRecoNtuple(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <Int_t>                        expectBLayerHit{"expectBLayerHit", m_tree, this};
        NtupleBranch <Int_t>                        expectInnermostPixelLayerHit{"expectInnermostPixelLayerHit",m_tree, this};
        NtupleBranch <Int_t>                        expectNextToInnermostPixelLayerHit{"expectNextToInnermostPixelLayerHit",m_tree, this};
        NtupleBranch <Int_t>                        hasTrack{"hasTrack",        m_tree, this};
        NtupleBranch <Int_t>                        hasTruth{"hasTruth",        m_tree, this};
        NtupleBranch <Int_t>                        numberOfBLayerHits{"numberOfBLayerHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfBLayerOutliers{"numberOfBLayerOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfBLayerSharedHits{"numberOfBLayerSharedHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfBLayerSplitHits{"numberOfBLayerSplitHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfContribPixelLayers{"numberOfContribPixelLayers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfDBMHits{"numberOfDBMHits", m_tree, this};
        NtupleBranch <Int_t>                        numberOfGangedFlaggedFakes{"numberOfGangedFlaggedFakes",m_tree, this};
        NtupleBranch <Int_t>                        numberOfGangedPixels{"numberOfGangedPixels",m_tree, this};
        NtupleBranch <Int_t>                        numberOfInnermostPixelLayerHits{"numberOfInnermostPixelLayerHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfInnermostPixelLayerOutliers{"numberOfInnermostPixelLayerOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfInnermostPixelLayerSharedHits{"numberOfInnermostPixelLayerSharedHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfInnermostPixelLayerSplitHits{"numberOfInnermostPixelLayerSplitHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfNextToInnermostPixelLayerHits{"numberOfNextToInnermostPixelLayerHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfNextToInnermostPixelLayerOutliers{"numberOfNextToInnermostPixelLayerOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfNextToInnermostPixelLayerSharedHits{"numberOfNextToInnermostPixelLayerSharedHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfNextToInnermostPixelLayerSplitHits{"numberOfNextToInnermostPixelLayerSplitHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelDeadSensors{"numberOfPixelDeadSensors",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelHits{"numberOfPixelHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelHoles{"numberOfPixelHoles",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelOutliers{"numberOfPixelOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelSharedHits{"numberOfPixelSharedHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelSplitHits{"numberOfPixelSplitHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfPixelSpoiltHits{"numberOfPixelSpoiltHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTDeadSensors{"numberOfSCTDeadSensors",m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTDoubleHoles{"numberOfSCTDoubleHoles",m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTHits{"numberOfSCTHits", m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTHoles{"numberOfSCTHoles",m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTOutliers{"numberOfSCTOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTSharedHits{"numberOfSCTSharedHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfSCTSpoiltHits{"numberOfSCTSpoiltHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTDeadStraws{"numberOfTRTDeadStraws",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTHighThresholdHits{"numberOfTRTHighThresholdHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTHighThresholdHitsTotal{"numberOfTRTHighThresholdHitsTotal",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTHighThresholdOutliers{"numberOfTRTHighThresholdOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTHits{"numberOfTRTHits", m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTHoles{"numberOfTRTHoles",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTOutliers{"numberOfTRTOutliers",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTSharedHits{"numberOfTRTSharedHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTTubeHits{"numberOfTRTTubeHits",m_tree, this};
        NtupleBranch <Int_t>                        numberOfTRTXenonHits{"numberOfTRTXenonHits",m_tree, this};
        NtupleBranch <Int_t>                        passedTrackSelection{"passedTrackSelection",m_tree, this};
        NtupleBranch <Int_t>                        passedTruthSelection{"passedTruthSelection",m_tree, this};
        NtupleBranch <Float_t>                      trackErr_d0{"trackErr_d0",     m_tree, this};
        NtupleBranch <Float_t>                      trackErr_phi{"trackErr_phi",    m_tree, this};
        NtupleBranch <Float_t>                      trackErr_pt{"trackErr_pt",     m_tree, this};
        NtupleBranch <Float_t>                      trackErr_qOverP{"trackErr_qOverP", m_tree, this};
        NtupleBranch <Float_t>                      trackErr_qOverPt{"trackErr_qOverPt",m_tree, this};
        NtupleBranch <Float_t>                      trackErr_theta{"trackErr_theta",  m_tree, this};
        NtupleBranch <Float_t>                      trackErr_z0{"trackErr_z0",     m_tree, this};
        NtupleBranch <Float_t>                      trackErr_z0sin{"trackErr_z0sin",  m_tree, this};
        NtupleBranch <Float_t>                      track_charge{"track_charge",    m_tree, this};
        NtupleBranch <Float_t>                      track_chiSquared{"track_chiSquared",m_tree, this};
        NtupleBranch <Float_t>                      track_d0{"track_d0",        m_tree, this};
        NtupleBranch <Float_t>                      track_eta{"track_eta",       m_tree, this};
        NtupleBranch <Float_t>                      track_nDoF{"track_nDoF",      m_tree, this};
        NtupleBranch <unsigned long>                track_patternInfo{"track_patternInfo",m_tree, this};
        NtupleBranch <Float_t>                      track_phi{"track_phi",       m_tree, this};
        NtupleBranch <Float_t>                      track_pt{"track_pt",        m_tree, this};
        NtupleBranch <Float_t>                      track_qOverP{"track_qOverP",    m_tree, this};
        NtupleBranch <Float_t>                      track_qOverPt{"track_qOverPt",   m_tree, this};
        NtupleBranch <Float_t>                      track_theta{"track_theta",     m_tree, this};
        NtupleBranch <Float_t>                      track_truthMatchProb{"track_truthMatchProb",m_tree, this};
        NtupleBranch <Int_t>                        track_truthMatchRanking{"track_truthMatchRanking",m_tree, this};
        NtupleBranch <Float_t>                      track_z0{"track_z0",        m_tree, this};
        NtupleBranch <Float_t>                      track_z0sin{"track_z0sin",     m_tree, this};
        NtupleBranch <Int_t>                        truth_barcode{"truth_barcode",   m_tree, this};
        NtupleBranch <Float_t>                      truth_charge{"truth_charge",    m_tree, this};
        NtupleBranch <Float_t>                      truth_d0{"truth_d0",        m_tree, this};
        NtupleBranch <Float_t>                      truth_eta{"truth_eta",       m_tree, this};
        NtupleBranch <Int_t>                        truth_pdgId{"truth_pdgId",     m_tree, this};
        NtupleBranch <Float_t>                      truth_phi{"truth_phi",       m_tree, this};
        NtupleBranch <Float_t>                      truth_pt{"truth_pt",        m_tree, this};
        NtupleBranch <Float_t>                      truth_qOverP{"truth_qOverP",    m_tree, this};
        NtupleBranch <Float_t>                      truth_qOverPt{"truth_qOverPt",   m_tree, this};
        NtupleBranch <Int_t>                        truth_selectedByPileupSwitch{"truth_selectedByPileupSwitch",m_tree, this};
        NtupleBranch <Float_t>                      truth_theta{"truth_theta",     m_tree, this};
        NtupleBranch <Float_t>                      truth_z0{"truth_z0",        m_tree, this};
        NtupleBranch <Float_t>                      truth_z0sin{"truth_z0sin",     m_tree, this};
};
#endif // NTAU__TRUTHRECONTUPLE__H
